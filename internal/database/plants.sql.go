// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: plants.sql

package database

import (
	"context"
	"database/sql"
)

const addPlant = `-- name: AddPlant :one
INSERT INTO plants(plant_type, planted_at)
VALUES (
	$1,
	$2
	)
RETURNING id, plant_type, planted_at, created_at, updated_at
`

type AddPlantParams struct {
	PlantType string
	PlantedAt sql.NullTime
}

func (q *Queries) AddPlant(ctx context.Context, arg AddPlantParams) (Plant, error) {
	row := q.db.QueryRowContext(ctx, addPlant, arg.PlantType, arg.PlantedAt)
	var i Plant
	err := row.Scan(
		&i.ID,
		&i.PlantType,
		&i.PlantedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllPlants = `-- name: GetAllPlants :many
SELECT id, plant_type, planted_at, created_at, updated_at FROM plants
`

func (q *Queries) GetAllPlants(ctx context.Context) ([]Plant, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plant
	for rows.Next() {
		var i Plant
		if err := rows.Scan(
			&i.ID,
			&i.PlantType,
			&i.PlantedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlantById = `-- name: GetPlantById :one
SELECT id, plant_type, planted_at, created_at, updated_at FROM plants WHERE id = $1
`

func (q *Queries) GetPlantById(ctx context.Context, id int32) (Plant, error) {
	row := q.db.QueryRowContext(ctx, getPlantById, id)
	var i Plant
	err := row.Scan(
		&i.ID,
		&i.PlantType,
		&i.PlantedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlantsByType = `-- name: GetPlantsByType :many
SELECT id, plant_type, planted_at, created_at, updated_at FROM plants
WHERE plant_type = $1
ORDER BY planted_at DESC NULLS LAST
`

func (q *Queries) GetPlantsByType(ctx context.Context, plantType string) ([]Plant, error) {
	rows, err := q.db.QueryContext(ctx, getPlantsByType, plantType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plant
	for rows.Next() {
		var i Plant
		if err := rows.Scan(
			&i.ID,
			&i.PlantType,
			&i.PlantedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePlantById = `-- name: RemovePlantById :exec
DELETE FROM plants * WHERE id = $1
`

func (q *Queries) RemovePlantById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, removePlantById, id)
	return err
}

const resetPlants = `-- name: ResetPlants :exec
DELETE FROM plants *
`

func (q *Queries) ResetPlants(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetPlants)
	return err
}
