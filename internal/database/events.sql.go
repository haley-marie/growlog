// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: events.sql

package database

import (
	"context"
)

const createCareEvent = `-- name: CreateCareEvent :one
INSERT INTO events(task_name)
VALUES (
	$1
	)
RETURNING id, task_name, created_at, updated_at
`

func (q *Queries) CreateCareEvent(ctx context.Context, taskName string) (Event, error) {
	row := q.db.QueryRowContext(ctx, createCareEvent, taskName)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.TaskName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEventById = `-- name: GetEventById :one
SELECT id, task_name, created_at, updated_at FROM events WHERE id = $1
`

func (q *Queries) GetEventById(ctx context.Context, id int32) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEventById, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.TaskName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCareEvents = `-- name: ListCareEvents :many
SELECT id, task_name, created_at, updated_at FROM events
`

func (q *Queries) ListCareEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listCareEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.TaskName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
